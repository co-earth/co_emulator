#pragma once

#include "Base.h"
#include "Constants.h"

EXTERN_C_BEGIN

#pragma pack(push, 1)

enum {
	RUNTIME_SKILL_TYPE_NONE,
	RUNTIME_SKILL_TYPE_SWORD,
	RUNTIME_SKILL_TYPE_MAGIC,
	RUNTIME_SKILL_TYPE_SPECIAL,
	RUNTIME_SKILL_TYPE_PASSIVE,
	RUNTIME_SKILL_TYPE_COMBO,
	RUNTIME_SKILL_TYPE_CUSTOM,
	RUNTIME_SKILL_TYPE_ACTIVE,
	RUNTIME_SKILL_TYPE_BASIC,
	RUNTIME_SKILL_TYPE_TRAIN_BY_CURRENCY,
	RUNTIME_SKILL_TYPE_TRAIN_BY_POINT,
	RUNTIME_SKILL_TYPE_TRAIN_BY_QUEST,
	RUNTIME_SKILL_TYPE_TRAIN_BY_ALL,
};

enum {
	RUNTIME_SKILL_GROUP_PASSIVE = 0,
	RUNTIME_SKILL_GROUP_ATTACK = 1,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_ATTACK_UNKNOWN = 3,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_MOVEMENT = 5,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_UNKNOWN_13 = 13,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_BUFF = 24,
	RUNTIME_SKILL_GROUP_DEBUFF = 25,
	RUNTIME_SKILL_GROUP_HEAL = 26,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_ASTRAL = 31,
	RUNTIME_SKILL_GROUP_UNKNOWN_32 = 32,
	RUNTIME_SKILL_GROUP_WING = 33,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_VEHICLE = 38,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_COMBO = 40,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_UNKNOWN_42 = 42,
	RUNTIME_SKILL_GROUP_TOTEM = 43,
	RUNTIME_SKILL_GROUP_AGGRO = 44,
	/* RESERVED NOT IN USE */
	RUNTIME_SKILL_GROUP_COUNT = 50
};

enum {
	RUNTIME_SKILL_RESULT_CRITICAL = 1,
	RUNTIME_SKILL_RESULT_NORMAL,
	RUNTIME_SKILL_RESULT_MISS,
	RUNTIME_SKILL_RESULT_MOB_IS_DEAD,
	RUNTIME_SKILL_RESULT_BUFF_SUCCESS,
	RUNTIME_SKILL_RESULT_BUFF_EXISTS = 0x10,
	RUNTIME_SKILL_RESULT_BUFF_EXISTS_CRITICAL = RUNTIME_SKILL_RESULT_BUFF_EXISTS | RUNTIME_SKILL_RESULT_CRITICAL,
	RUNTIME_SKILL_RESULT_BUFF_EXISTS_NORMAL = RUNTIME_SKILL_RESULT_BUFF_EXISTS | RUNTIME_SKILL_RESULT_NORMAL,
	RUNTIME_SKILL_RESULT_BUFF_EXISTS_MISS = RUNTIME_SKILL_RESULT_BUFF_EXISTS | RUNTIME_SKILL_RESULT_MISS,
	RUNTIME_SKILL_RESULT_ENCHANT,
	RUNTIME_SKILL_RESULT_STUN_FAILURE,
	RUNTIME_SKILL_RESULT_FULL_FAILURE,
	RUNTIME_SKILL_RESULT_DIFFERENT_WORLD,
	RUNTIME_SKILL_RESULT_TARGET_ERROR,
	RUNTIME_SKILL_RESULT_DAMAGE_ABSORBED,
};

enum {
	RUNTIME_SKILL_RANGE_TYPE_RECT,
	RUNTIME_SKILL_RANGE_TYPE_LINE,
};

struct _RTSkillSlot {
    UInt16 ID;
    UInt8 Level;
    UInt16 Index;
};

struct _RTSkillLevelData {
	Int32 Index;
	Int32 SkillID;
	Int32 SkillRank;
	Int32 SkillRankPoint;
	Int32 StartLevel;
	Int32 EndLevel;
	Int32 SkillPoint;
	Int32 TrainPrice;
	Int32 UntrainPrice;
	Int32 StyleMastery;
	Int32 BattleStyles[RUNTIME_DATA_CHARACTER_BATTLE_STYLE_INDEX_MAX];
};

struct _RTCharacterSkillData {
	Int32 SkillID;
	Int32 SkillType;
	Int32 SkillGroup;
	Int32 Multi;
	Int32 Target;
	Int32 MaxTarget;
	Int32 Reach;
	Int32 MReach;
	Int32 Range;
	Int32 RangeType;
	Int32 GripCalc;
	Int32 AniCode;
	Int32 FxCodeOn;
	Int32 FxCodeKeep;
	Int32 FrameTerm;
	Int32 BlendLimit;
	Int32 HitFrame;
	Int32 FiringFrame;
	Int32 AniFrame;
	Int32 VisualType;
	Int32 ConditionTwoHand;
	Int32 ConditionDual;
	Int32 ConditionOneHand;
	Int32 ConditionBracer;
	Int32 ConditionOneChakram;
	Int32 ConditionTwoChakram;
	Int32 ConditionExclusive;
	Int32 SkillExp1;
	Int32 SkillExp2;
	Int32 SAmp[2];
	Int32 Atk[3];
	Int32 SHit[2];
	Int32 SPenet[2];
	Int32 CritDmg[2];
	Int32 CooltimeID;
	Int32 Mp[2];
	Int32 Sp;
	Int32 SkillLevelCount;
	struct _RTSkillLevelData SkillLevels[RUNTIME_MEMORY_MAX_SKILL_LEVEL_DATA_COUNT];
};

Int32 RTCharacterSkillDataGetSkillType(
	RTCharacterSkillDataRef Skill,
	Bool IsPassiveSword,
	Bool IsPassiveMagic
);

Int32 RTCharacterSkillDataGetSkillExp(
	RTCharacterSkillDataRef Skill,
	Int32 SkillResult
);

Int32 RTCalculateDistance(
	Int32 X1,
	Int32 Y1,
	Int32 X2,
	Int32 Y2
);

Bool RTCheckSkillTargetDistance(
	RTCharacterSkillDataRef Skill,
	Float32 Radius,
	Int32 Scale,
	Int32 SourceX,
	Int32 SourceY,
	Int32 TargetX,
	Int32 TargetY
);

#pragma pack(pop)

EXTERN_C_END